import jwt from "jsonwebtoken";
import asyncHandler from 'express-async-handler';

// =======================================================
// MIDDLEWARE DE AUTENTICA√á√ÉO (verificarToken)
// OBRIGAT√ìRIO: Verificar se o usu√°rio est√° logado e obter o ID
// =======================================================
export const verificarToken = (req, res, next) => {
    // Tenta obter o cabe√ßalho Authorization
    const authHeader = req.headers["authorization"];
    // Extrai o token, pulando a palavra "Bearer "
    const token = authHeader && authHeader.split(" ")[1]; 

    // üõë TRATA O ERRO ORIGINAL: "Acesso negado, token n√£o fornecido"
    if (!token) {
        return res.status(401).json({ erro: "Acesso negado, token n√£o fornecido" });
    }

    const segredo = process.env.JWT_SECRET;

    if (!segredo) {
        console.error("ERRO CR√çTICO: JWT_SECRET n√£o carregado no ambiente!");
        return res.status(500).json({ erro: "Erro interno de configura√ß√£o do servidor." });
    }

    try {
        const payload = jwt.verify(token, segredo);
        
        // üîë CORRE√á√ÉO PARA O ERRO DE ID AUSENTE:
        // Anexa o ID e o Tipo √† requisi√ß√£o. A rota de agendamento deve usar req.usuarioId
        req.usuarioId = payload.id; 
        req.usuarioTipo = payload.tipo; 
        
        // Se a verifica√ß√£o for bem-sucedida, continua para o pr√≥ximo middleware/rota
        next();
    } catch (error) {
        // Trata tokens inv√°lidos ou expirados (ex: o token antigo que voc√™ me enviou)
        return res.status(403).json({ erro: "Token inv√°lido ou expirado" });
    }
};

// =======================================================
// MIDDLEWARE DE AUTORIZA√á√ÉO (isVendedor)
// Opcional: Garante que apenas vendedores/admins podem acessar
// =======================================================
export const isVendedor = asyncHandler(async (req, res, next) => {
    // Obt√©m o tipo ANEXADO pelo middleware 'verificarToken'
    const tipo = req.usuarioTipo; 

    // Garante que o tipo √© 'vendedor' ou 'Admin'
    if (tipo === 'vendedor' || tipo === 'Admin') {
        next(); // Permiss√£o concedida
    } else {
        // Define o status de Proibido e lan√ßa um erro para o Error Handler
        res.status(403); 
        throw new Error('Acesso negado. Voc√™ n√£o tem permiss√£o de Vendedor ou Administrador.');
    }
});